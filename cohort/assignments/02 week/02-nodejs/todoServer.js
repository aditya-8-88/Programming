/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */


const express = require('express');
const fs = require('fs');
const bodyParser = require('body-parser');
const { type } = require('os');


const app = express();

app.use(bodyParser.json());


app.get('/todos', (req, res) => {

  fs.readFile('todos.json', 'utf8', (err, data) => {

    if (err) {
      return res.status(404).send('Not Found');
    }
    const todos = JSON.parse(data);
    // console.log(typeof(todos));
    return res.status(200).json(todos);

  });

});


// app.get('/todos', (req, res) => {
//   fs.readFile('todos.json', 'utf8', (err, data) => {
//       if (err) {
//           res.status(404).send('Not Found');
//       } else {
//           res.status(200).send(data);
//       }
//   });
// });



app.get('/todos/:id', (req, res) => {

  fs.readFile('todos.json', 'utf8', (err, data) => {

    if (err) {
      return res.status(404).send('Not Found');
    }


    let todos = JSON.parse(data);
    let todo = todos.find(todo => todo.id == req.params.id);
    if (todo) {
      res.status(200).send(todo);
    } else {
      res.status(404).send('Not Found');
    }

  });

});


// app.get('/todos/:id', (req, res) => {
//   fs.readFile('todos.json', 'utf8', (err, data) => {
//     if (err) {
//       res.status(404).send('Not Found');
//     } else {
//       let todos = JSON.parse(data);
//       let todo = todos.find(todo => todo.id == req.params.id);
//       if (todo) {
//         res.status(200).send(todo);
//       } else {
//         res.status(404).send('Not Found');
//       }
//     }
//   });
// });




app.post('/todos', (req, res) => {

  const body = req.body;
  // console.log(JSON.stringify(body));

  let todos = [];

  fs.readFile('todos.json', 'utf8', (err, data) => {

    if (err) {
      return res.status(404).send('Not Found');
    }

    todos = JSON.parse(data);
    // console.log(todos);

  });

  console.log(todos.length);
  const newTodo = {
    id: todos.length + 1,
    title: body.title,
    description: body.description
  };

  todos.push(newTodo);

  fs.writeFile('todos.json', JSON.stringify(todos), (err) => {

    if (err) {
      return res.status(500).send('Error saving data');
    }
    return res.status(201).json(newTodo);

  });

});



// app.post('/todos', (req, res) => {
//   fs.readFile('todos.json', 'utf8', (err, data) => {
//       let todos = JSON.parse(data);
//       let newTodo = req.body;
//       newTodo.id = todos.length + 1;
//       todos.push(newTodo);
//       fs.writeFile('todos.json', JSON.stringify(todos), (err) => {
//           res.status(201).send({ id: newTodo.id });
//       });
//   });
// });





app.put('/todos/:id', (req, res) => {

  fs.readFile('todos.json', 'utf8', (err, data) => {

    if (err) {
      return res.status(404).send('File not Not Found');
    }

    const todos = JSON.parse(data);
    // console.log(todos.length);
    let flag = 0;

    for (let i = 0; i < todos.length; i++) {
      if (todos[i].id == req.params.id) {
        todos[i].title = req.body.title;
        todos[i].description = req.body.description;
        flag = 1;
        break;
      }
    }

    // console.log(todos);

    if (flag == 1) {
      fs.writeFile('todos.json', JSON.stringify(todos), (err) => {

        if (err) {
          return res.status(500).send('Error saving data');
        }
        return res.status(200).send('updated');

      });
    }
    else {
      return res.status(404).send('id not found');
    }
  });

});


// app.put('/todos/:id', (req, res) => {
//   fs.readFile('todos.json', 'utf8', (err, data) => {
//       let todos = JSON.parse(data);
//       let todo = todos.find(todo => todo.id == req.params.id);
//       if (todo) {
//           let updatedTodo = req.body;
//           updatedTodo.id = todo.id;
//           todos[todos.indexOf(todo)] = updatedTodo;
//           fs.writeFile('todos.json', JSON.stringify(todos), (err) => {
//               res.status(200).send('OK');
//           });
//       } else {
//           res.status(404).send('Not Found');
//       }
//   });
// });



app.delete('/todos/:id', (req, res) => {

  fs.readFile('todos.json', 'utf8', (err, data) => {
    let todos = JSON.parse(data);
    let todo = todos.find(todo => todo.id == req.params.id);
    if (todo) {
      todos.splice(todos.indexOf(todo), 1);
      fs.writeFile('todos.json', JSON.stringify(todos), (err) => {
        res.status(200).send('Deleted');
      });
    } else {
      res.status(404).send('Not Found');
    }
  });

});


// app.delete('/todos/:id', (req, res) => {
//   fs.readFile('todos.json', 'utf8', (err, data) => {
//       let todos = JSON.parse(data);
//       let todo = todos.find(todo => todo.id == req.params.id);
//       if (todo) {
//           todos.splice(todos.indexOf(todo), 1);
//           fs.writeFile('todos.json', JSON.stringify(todos), (err) => {
//               res.status(200).send('OK');
//           });
//       } else {
//           res.status(404).send('Not Found');
//       }
//   });
// });

// app.use((req, res) => {
//   res.status(404).send('Not Found');
// });



app.use((req, res) => {
  res.status(404).send('Not Found');
});

// app.listen(3000);

module.exports = app;

